.TH DWM 1 dwm\-VERSION


.SH NAME
dwm \- dynamic window manager (Sherlock5512's Build)


.SH SYNOPSIS
.B dwm
.RB [ \–v ]


.SH IMPORTANT NOTE
This build of dwm is pre-configured with various patches and configuration choices.
As such it has more dependencies than a base build of dwm
See below for further details on these dependencies.


.SH DESCRIPTION
dwm is a dynamic window manager for X. It manages windows in various layouts
which are described below. Layouts can be applied dynamically, optimising the
environment for the application in use and the task being performed.
.P
Windows are grouped by tags. Each window can be tagged with one or multiple
tags. Selecting tags displays all windows with these tags.
.P
Each screen contains a top status bar which displays all active tags, the
layout, the system tray,the title of all windows with the selected tags, and the text
read from the root window name property, and the bottom bar contains extra text
from the root window name property
(see
.B Status bars
below.) if the screen is focussed.
A floating window is indicated with an
empty square and a maximised floating window is indicated with a filled square
before the windows title.
The Selected tags are drawn in a different colour. And for every window with that tag
there is a dot drawn along the left side, the active window is drawn as a line.
The selected window title is highlighted and hidden windows have their titles made
transparent
.P
dwm draws a small border around windows to indicate the focus state. And when there is
more than one window on the current screen they are separated by customisable gaps.


.SH OPTIONS
.TP
.B \–v
prints version information to stderr, then exits.


.SH LAYOUTS
This dwm build is built with multiple layouts.
These Layouts are Listed below along with their icons in brackets
and a short description.
.P
.TP
.B Tile ([]=)
the default layout Master area on the left stack on the right
.TP
.B Floating (><>)
The null layout all windows are floating and can be positioned anywhere and everywhere
at any size.
.TP
.B Monocle ([M])
All windows take up the whole screen and are layered on top of each other.
.TP
.B Bstack (TTT)
Master on top Stack on bottom.
.TP
.B Horizontal Bstack (===)
Master on top Stack on bottom (windows in the stack are stacked on top op each other).
.TP
.B Centered Master (|M|)
Master in the center stack on the outside.
.TP
.B Deck ([D])
Master on the left Stack on the right with all the stack windows taking up the whole space on top of each other.
.TP
.B Spiral ((@))
A Fibonacci spiral layout with the windows taking up half the remaining space each time towards the centre.
.TP
.B Dwindle ([\])
A Fibonacci spiral layout with the windows taking up half the remaining space each time towards the bottom left corner.
.TP
.B Grid (HHH)
A Grid layout (Duh) with windows going down then across like columns.
.TP
.B Horizontal Grid (---)
A Grid layout (Duh) with windows going across then down like rows.
.TP
.B N-row Grid (###)
A Grid layout (Duh) with windows going down then across like columns. Except
limited to a set number of rows (this is number of clients allowed in the
master area [see key commands for how to change] )
.P
To change between the layouts you use keyboard commands. These commands are listed below.


.SH USAGE
.SS Status bars
.TP
.B X root window name
is read and displayed in the status text area. It can be set with the
.BR xsetroot (1)
command.
.br
.I NOTE:
Anything after a semicolon
.I (;)
will be placed in the bottom bar.

.SS System Tray
.TP
.B Functionality
The system tray functions the same as it would in a normal Desktop Environment.
All applets and apps with system tray support
.I e.g Discord
will appear in the system tray and be fully interactive.


.SH KEYBOARD COMMANDS
.SS
.B Definitions
As the ModKey can be configured it will be referred to as MOD.
By default the ModKey is
.B Alt
this is same in my build.

.SS Basic Functionality
.TP
.B MOD–p
Spawn
.BR dmenu (1)
for launching other programs.
.TP
.B MOD–Shift–Return
Start a new terminal session (By Default
.BR st (1)
).
.TP
.B MOD–b
Toggle the bar on and off.
.TP
.B MOD–Shift–c
Kill the active window.
.TP
.B MOD–Control–z
.TP
Hide the active window.
.TP
.B MOD–Control–Shift–q
Reload dwm. (this is useful while configuring as it doesn't kill your active windows)

.SS Controlling the Stack
dwm puts all the windows with the selected tag in a stack.
With one application always in the master area (when one is available).
These commands are for manipulating the stack the way you want.
(and also modifying the master area's properties)
.TP
.B MOD–j
Traverse
.B up
the Program Stack.
.TP
.B MOD–k
Traverse
.B down
the Program Stack.
.TP
.B MOD–d
.B Decrease
the number of windows in the master area.
.TP
.B MOD–i
.B Increase
the number of windows in the master area.
.TP
.B MOD–h
.B Decrease
the size of the master area.
.TP
.B MOD–l
.B Increase
the size of the master area.
.TP
.B MOD–Shift–j
Move the current window
.B up
the program stack.
.TP
.B MOD–Shift–k
Move the current window
.B down
the program stack.
.TP
.B MOD–Return
swap the active window with the master. (if the active window
.B is
the master then swap it with the top of the stack).

.SS Controlling the Gaps
When there are multiple windows on the screen dwm will draw gaps around them.
These commands allow you to customise the gaps based on your current needs.
Unless specified otherwise adding shift inverts an action.
.TP
.B MOD–Super–u
Change the size of all gaps.
.TP
.B MOD–Super–i
Change the size of the inner gaps.
.TP
.B MOD–Super–o
Change the size of the outer gaps.
.TP
.B MOD–Super–6
Change the Horizontal inner gaps.
.TP
.B MOD–Super–7
Change the Vertical inner gaps.
.TP
.B MOD–Super–8
Change the Horizontal outer gaps.
.TP
.B MOD–Super–9
Change the Horizontal outer gaps.
.TP
.B MOD–Super–0
Toggle gaps.
.TP
.B MOD–Super–s
Toggle smart gaps (enable gaps around single windows).
.TP
.B MOD–Super–Shift–0
Reset gaps to default settings.

.SS Layout Control
This build of dwm has many different Layouts.
The following Keyboard Commands help you switch between them.
.TP
.B MOD–t
Activate tiling layout.
.TP
.B MOD–f
Activate floating layout.
.TP
.B MOD–m
Activate monocle layout.
.TP
.B MOD–c
Activate Bstack layout.
.TP
.B MOD–Space
Toggle between current layout and last layout.
.TP
.B MOD–Comma
Cycle to previous layout.
.TP
.B MOD–Period
Cycle to next layout.
.TP
.B MOD–Space
Toggle floating status for current window.

.SS Scratchpad Control
.I Technically
the proper use of scratchpads is a quick popup terminal.
But this is my build and it works how I want.
.TP
.B MOD–grave
Open a popup terminal.
.TP
.B MOD–Shift–grave
Open a popup music player (Currently mocp might change later).
.TP
.B MOD–Control–grave
Open a popup ranger.
.TP
.B MOD–Control-p
Open a popup app launcher for .desktop files.

.SS Controlling Tags
dwm has 9 tags that can be applied to a window.
A window can have any number of tags applied to it.
In this build the tags can either be numbers or icons.
The icons refer to how the different tags are normally used.
.TP
.B MOD–n
Toggle between tags being numbered and tags having icons.
.TP
.B MOD–(0–9)
Activate the given tag (0 is special as it activates ALL tags).
.TP
.B MOD–Tab
Switch between the current tag and the last active tag(s).
.TP
.B MOD–Shift–(0-9)
Move the active window to the given tag.
.TP
.B MOD–Control–(0-9)
Append the given tags to the active tag list.
.TP
.B MOD–Control–Shift–(0-9)
Append the given tag to the active windows tag list.

.SS Monitor Control
.TP
.B MOD–Comma
Move focus back one monitor.
.TP
.B MOD–Period
Move focus forwards one monitor.
.TP
.B MOD–Shift–Comma
Move Active window back one monitor.
.TP
.B MOD–Shift–Period
Move Active window forwards one monitor

.SS Miscellaneous
.TP
.B Super–l
Lock screen. (uses slock + custom wrapper)
.TP
.B Super-Period
Run Emoji picker.
.TP
.B MOD–r
Launch ranger in a new terminal.
.TP
.B Super–v
Run Video Downloader script.
.TP
.B MOD–Slash
Run dmenuman script.
.TP
.B MOD-e
Run dmenu frontend for Eopkg package manager.

.SS Media Keys
.TP
.B Volume Up/Down/Mute
Function as normal.
.TP
.B Display (May also be a projector on some keyboards)
Runs Display Select Script.



.SH CUSTOMIZATION
dwm is customized by creating a custom config.h and (re)compiling the source
code. This keeps it fast, secure and simple.
.SH SEE ALSO
.BR dmenu (1),
.BR st (1)
.SH ISSUES
Java applications which use the XToolkit/XAWT backend may draw grey windows
only. The XToolkit/XAWT backend breaks ICCCM–compliance in recent JDK 1.5 and early
JDK 1.6 versions, because it assumes a reparenting window manager. Possible workarounds
are using JDK 1.4 (which doesn't contain the XToolkit/XAWT backend) or setting the
environment variable
.BR AWT_TOOLKIT=MToolkit
(to use the older Motif backend instead) or running
.B xprop –root –f _NET_WM_NAME 32a –set _NET_WM_NAME LG3D
or
.B wmname LG3D
(to pretend that a non–reparenting window manager is running that the
XToolkit/XAWT backend can recognize) or when using OpenJDK setting the environment variable
.BR _JAVA_AWT_WM_NONREPARENTING=1 .
.SH BUGS
Send all bug reports with a patch to hackers@suckless.org.
